#ifndef BLEND_H_
#define BLEND_H_

namespace wvn::gfx
{
	enum LogicOp
	{
		LOGIC_OP_NONE,
		LOGIC_OP_CLEAR,
		LOGIC_OP_AND,
		LOGIC_OP_AND_REVERSE,
		LOGIC_OP_COPY,
		LOGIC_OP_AND_INVERTED,
		LOGIC_OP_NO_OP,
		LOGIC_OP_XOR,
		LOGIC_OP_OR,
		LOGIC_OP_NOR,
		LOGIC_OP_EQUIVALENT,
		LOGIC_OP_INVERT,
		LOGIC_OP_OR_REVERSE,
		LOGIC_OP_COPY_INVERTED,
		LOGIC_OP_OR_INVERTED,
		LOGIC_OP_NAND,
		LOGIC_OP_SET,
		LOGIC_OP_MAX_ENUM
	};

	enum CompareOp
	{
		COMPARE_OP_NONE,
		COMPARE_OP_NEVER,
		COMPARE_OP_LESS,
		COMPARE_OP_EQUAL,
		COMPARE_OP_LESS_OR_EQUAL,
		COMPARE_OP_GREATER,
		COMPARE_OP_NOT_EQUAL,
		COMPARE_OP_GREATER_OR_EQUAL,
		COMPARE_OP_ALWAYS,
		COMPARE_OP_MAX_ENUM
	};

	enum BlendOp
	{
		BLEND_OP_NONE,
		BLEND_OP_ADD,
		BLEND_OP_SUBTRACT,
		BLEND_OP_REVERSE_SUBTRACT,
		BLEND_OP_MIN,
		BLEND_OP_MAX,
		BLEND_OP_ZERO,
		BLEND_OP_SRC,
		BLEND_OP_DST,
		BLEND_OP_SRC_OVER,
		BLEND_OP_DST_OVER,
		BLEND_OP_SRC_IN,
		BLEND_OP_DST_IN,
		BLEND_OP_SRC_OUT,
		BLEND_OP_DST_OUT,
		BLEND_OP_SRC_ATOP,
		BLEND_OP_DST_ATOP,
		BLEND_OP_XOR,
		BLEND_OP_MULTIPLY,
		BLEND_OP_SCREEN,
		BLEND_OP_OVERLAY,
		BLEND_OP_DARKEN,
		BLEND_OP_LIGHTEN,
		BLEND_OP_COLOUR_DODGE,
		BLEND_OP_COLOUR_BURN,
		BLEND_OP_HARDLIGHT,
		BLEND_OP_SOFTLIGHT,
		BLEND_OP_DIFFERENCE,
		BLEND_OP_EXCLUSION,
		BLEND_OP_INVERT,
		BLEND_OP_INVERT_RGB,
		BLEND_OP_LINEAR_DODGE,
		BLEND_OP_LINEAR_BURN,
		BLEND_OP_VIVID_LIGHT,
		BLEND_OP_LINEAR_LIGHT,
		BLEND_OP_PIN_LIGHT,
		BLEND_OP_HARD_MIX,
		BLEND_OP_HSL_HUE,
		BLEND_OP_HSL_SATURATION,
		BLEND_OP_HSL_COLOUR,
		BLEND_OP_HSL_LUMINOSITY,
		BLEND_OP_PLUS,
		BLEND_OP_PLUS_CLAMPED,
		BLEND_OP_PLUS_CLAMPED_ALPHA,
		BLEND_OP_PLUS_DARKER,
		BLEND_OP_MINUS,
		BLEND_OP_MINUS_CLAMPED,
		BLEND_OP_CONTRAST,
		BLEND_OP_INVERT_OVG,
		BLEND_OP_RED,
		BLEND_OP_GREEN,
		BLEND_OP_BLUE,
		BLEND_OP_MAX_ENUM
	};

	enum BlendFactor
	{
		BLEND_FACTOR_NONE,
		BLEND_FACTOR_ZERO,
		BLEND_FACTOR_ONE,
		BLEND_FACTOR_SRC_COLOUR,
		BLEND_FACTOR_ONE_MINUS_SRC_COLOUR,
		BLEND_FACTOR_DST_COLOUR,
		BLEND_FACTOR_ONE_MINUS_DST_COLOUR,
		BLEND_FACTOR_SRC_ALPHA,
		BLEND_FACTOR_ONE_MINUS_SRC_ALPHA,
		BLEND_FACTOR_DST_ALPHA,
		BLEND_FACTOR_ONE_MINUS_DST_ALPHA,
		BLEND_FACTOR_CONSTANT_COLOUR,
		BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOUR,
		BLEND_FACTOR_CONSTANT_ALPHA,
		BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA,
		BLEND_FACTOR_SRC_ALPHA_SATURATE,
		BLEND_FACTOR_SRC1_COLOUR,
		BLEND_FACTOR_ONE_MINUS_SRC1_COLOUR,
		BLEND_FACTOR_SRC1_ALPHA,
		BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA,
		BLEND_FACTOR_MAX_ENUM
	};

	struct Blend
	{
		BlendOp op;
		BlendFactor src;
		BlendFactor dst;

		Blend()
			: op(BLEND_OP_ADD)
			, src(BLEND_FACTOR_ONE)
			, dst(BLEND_FACTOR_ZERO)
		{
		}

		Blend(BlendOp op, BlendFactor src, BlendFactor dst)
			: op(op)
			, src(src)
			, dst(dst)
		{
		}
	};

	struct BlendState
	{
		float blend_constants[4]; // [r, g, b, a]
		bool write_mask[4]; // [r, g, b, a]

		Blend colour;
		Blend alpha;

		bool blend_op_enabled;
		LogicOp blend_op;

		BlendState()
			: blend_constants{0.0f, 0.0f, 0.0f, 0.0f}
			, write_mask{true, true, true, true}
			, colour()
			, alpha()
			, blend_op_enabled(false)
			, blend_op(LOGIC_OP_COPY)
		{
		}
	};
}

#endif // BLEND_H_
