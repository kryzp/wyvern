#ifndef TEXTURE_H_
#define TEXTURE_H_

#include <wvn/common.h>
#include <wvn/graphics/texture_sampler.h>

namespace wvn::gfx
{
	class Image;
	class RenderTarget;

	enum TextureFormat
	{
		TEX_FORMAT_NONE = 0,
		TEX_FORMAT_R4G4_UNORM_PACK8,
		TEX_FORMAT_R4G4B4A4_UNORM_PACK16,
		TEX_FORMAT_B4G4R4A4_UNORM_PACK16,
		TEX_FORMAT_R5G6B5_UNORM_PACK16,
		TEX_FORMAT_B5G6R5_UNORM_PACK16,
		TEX_FORMAT_R5G5B5A1_UNORM_PACK16,
		TEX_FORMAT_B5G5R5A1_UNORM_PACK16,
		TEX_FORMAT_A1R5G5B5_UNORM_PACK16,
		TEX_FORMAT_R8_UNORM,
		TEX_FORMAT_R8_SNORM,
		TEX_FORMAT_R8_USCALED,
		TEX_FORMAT_R8_SSCALED,
		TEX_FORMAT_R8_UINT,
		TEX_FORMAT_R8_SINT,
		TEX_FORMAT_R8_SRGB,
		TEX_FORMAT_R8G8_UNORM,
		TEX_FORMAT_R8G8_SNORM,
		TEX_FORMAT_R8G8_USCALED,
		TEX_FORMAT_R8G8_SSCALED,
		TEX_FORMAT_R8G8_UINT,
		TEX_FORMAT_R8G8_SINT,
		TEX_FORMAT_R8G8_SRGB,
		TEX_FORMAT_R8G8B8_UNORM,
		TEX_FORMAT_R8G8B8_SNORM,
		TEX_FORMAT_R8G8B8_USCALED,
		TEX_FORMAT_R8G8B8_SSCALED,
		TEX_FORMAT_R8G8B8_UINT,
		TEX_FORMAT_R8G8B8_SINT,
		TEX_FORMAT_R8G8B8_SRGB,
		TEX_FORMAT_B8G8R8_UNORM,
		TEX_FORMAT_B8G8R8_SNORM,
		TEX_FORMAT_B8G8R8_USCALED,
		TEX_FORMAT_B8G8R8_SSCALED,
		TEX_FORMAT_B8G8R8_UINT,
		TEX_FORMAT_B8G8R8_SINT,
		TEX_FORMAT_B8G8R8_SRGB,
		TEX_FORMAT_R8G8B8A8_UNORM,
		TEX_FORMAT_R8G8B8A8_SNORM,
		TEX_FORMAT_R8G8B8A8_USCALED,
		TEX_FORMAT_R8G8B8A8_SSCALED,
		TEX_FORMAT_R8G8B8A8_UINT,
		TEX_FORMAT_R8G8B8A8_SINT,
		TEX_FORMAT_R8G8B8A8_SRGB,
		TEX_FORMAT_B8G8R8A8_UNORM,
		TEX_FORMAT_B8G8R8A8_SNORM,
		TEX_FORMAT_B8G8R8A8_USCALED,
		TEX_FORMAT_B8G8R8A8_SSCALED,
		TEX_FORMAT_B8G8R8A8_UINT,
		TEX_FORMAT_B8G8R8A8_SINT,
		TEX_FORMAT_B8G8R8A8_SRGB,
		TEX_FORMAT_A8B8G8R8_UNORM_PACK32,
		TEX_FORMAT_A8B8G8R8_SNORM_PACK32,
		TEX_FORMAT_A8B8G8R8_USCALED_PACK32,
		TEX_FORMAT_A8B8G8R8_SSCALED_PACK32,
		TEX_FORMAT_A8B8G8R8_UINT_PACK32,
		TEX_FORMAT_A8B8G8R8_SINT_PACK32,
		TEX_FORMAT_A8B8G8R8_SRGB_PACK32,
		TEX_FORMAT_A2R10G10B10_UNORM_PACK32,
		TEX_FORMAT_A2R10G10B10_SNORM_PACK32,
		TEX_FORMAT_A2R10G10B10_USCALED_PACK32,
		TEX_FORMAT_A2R10G10B10_SSCALED_PACK32,
		TEX_FORMAT_A2R10G10B10_UINT_PACK32,
		TEX_FORMAT_A2R10G10B10_SINT_PACK32,
		TEX_FORMAT_A2B10G10R10_UNORM_PACK32,
		TEX_FORMAT_A2B10G10R10_SNORM_PACK32,
		TEX_FORMAT_A2B10G10R10_USCALED_PACK32,
		TEX_FORMAT_A2B10G10R10_SSCALED_PACK32,
		TEX_FORMAT_A2B10G10R10_UINT_PACK32,
		TEX_FORMAT_A2B10G10R10_SINT_PACK32,
		TEX_FORMAT_R16_UNORM,
		TEX_FORMAT_R16_SNORM,
		TEX_FORMAT_R16_USCALED,
		TEX_FORMAT_R16_SSCALED,
		TEX_FORMAT_R16_UINT,
		TEX_FORMAT_R16_SINT,
		TEX_FORMAT_R16_SFLOAT,
		TEX_FORMAT_R16G16_UNORM,
		TEX_FORMAT_R16G16_SNORM,
		TEX_FORMAT_R16G16_USCALED,
		TEX_FORMAT_R16G16_SSCALED,
		TEX_FORMAT_R16G16_UINT,
		TEX_FORMAT_R16G16_SINT,
		TEX_FORMAT_R16G16_SFLOAT,
		TEX_FORMAT_R16G16B16_UNORM,
		TEX_FORMAT_R16G16B16_SNORM,
		TEX_FORMAT_R16G16B16_USCALED,
		TEX_FORMAT_R16G16B16_SSCALED,
		TEX_FORMAT_R16G16B16_UINT,
		TEX_FORMAT_R16G16B16_SINT,
		TEX_FORMAT_R16G16B16_SFLOAT,
		TEX_FORMAT_R16G16B16A16_UNORM,
		TEX_FORMAT_R16G16B16A16_SNORM,
		TEX_FORMAT_R16G16B16A16_USCALED,
		TEX_FORMAT_R16G16B16A16_SSCALED,
		TEX_FORMAT_R16G16B16A16_UINT,
		TEX_FORMAT_R16G16B16A16_SINT,
		TEX_FORMAT_R16G16B16A16_SFLOAT,
		TEX_FORMAT_R32_UINT,
		TEX_FORMAT_R32_SINT,
		TEX_FORMAT_R32_SFLOAT,
		TEX_FORMAT_R32G32_UINT,
		TEX_FORMAT_R32G32_SINT,
		TEX_FORMAT_R32G32_SFLOAT,
		TEX_FORMAT_R32G32B32_UINT,
		TEX_FORMAT_R32G32B32_SINT,
		TEX_FORMAT_R32G32B32_SFLOAT,
		TEX_FORMAT_R32G32B32A32_UINT,
		TEX_FORMAT_R32G32B32A32_SINT,
		TEX_FORMAT_R32G32B32A32_SFLOAT,
		TEX_FORMAT_R64_UINT,
		TEX_FORMAT_R64_SINT,
		TEX_FORMAT_R64_SFLOAT,
		TEX_FORMAT_R64G64_UINT,
		TEX_FORMAT_R64G64_SINT,
		TEX_FORMAT_R64G64_SFLOAT,
		TEX_FORMAT_R64G64B64_UINT,
		TEX_FORMAT_R64G64B64_SINT,
		TEX_FORMAT_R64G64B64_SFLOAT,
		TEX_FORMAT_R64G64B64A64_UINT,
		TEX_FORMAT_R64G64B64A64_SINT,
		TEX_FORMAT_R64G64B64A64_SFLOAT,
		TEX_FORMAT_B10G11R11_UFLOAT_PACK32,
		TEX_FORMAT_E5B9G9R9_UFLOAT_PACK32,
		TEX_FORMAT_D16_UNORM,
		TEX_FORMAT_X8_D24_UNORM_PACK32,
		TEX_FORMAT_D32_SFLOAT,
		TEX_FORMAT_D32_SFLOAT_S8_UINT,
		TEX_FORMAT_D24_UNORM_S8_UINT,
		TEX_FORMAT_S8_UINT,
		TEX_FORMAT_MAX_ENUM
	};

	enum TextureTiling
	{
		TEX_TILE_NONE = 0,
		TEX_TILE_OPTIMAL,
		TEX_TILE_LINEAR,
		TEX_TILE_MAX_ENUM
	};

	enum TextureType
	{
		TEX_TYPE_NONE = 0,
		TEX_TYPE_1D,
		TEX_TYPE_1D_ARRAY,
		TEX_TYPE_2D,
		TEX_TYPE_2D_ARRAY,
		TEX_TYPE_3D,
		TEX_TYPE_CUBE,
		TEX_TYPE_CUBE_ARRAY,
		TEX_TYPE_MAX_ENUM
	};

	enum TextureProperty
	{
		TEXTURE_PROPERTY_NONE = 0,
		TEXTURE_PROPERTY_MIPMAPPED,
		TEXTURE_PROPERTY_MAX_ENUM
	};

	struct TextureMetaData
	{
		TextureFormat format;
		TextureTiling tiling;
		TextureType type;
	};

	/**
	 * Generic texture class for representing, storing and manipulating a texture.
	 */
	class Texture
	{
	public:
		Texture();
		virtual ~Texture();

		virtual void clean_up() = 0;

		virtual void set_parent(RenderTarget* parent) = 0;
		virtual const RenderTarget* get_parent() const = 0;
		virtual bool has_parent() const = 0;

		virtual u32 get_layer_count() const = 0;
		virtual u32 get_face_count() const = 0;

		virtual u32 width() const = 0;
		virtual u32 height() const = 0;

		virtual TextureMetaData meta_data() const = 0;

		virtual u32 mip_levels() const = 0;
		void set_mipmapped(bool mipmapped) { m_mipmapped = mipmapped; }
		bool is_mipmapped() const { return m_mipmapped; }

	protected:
		u32 m_depth;
		bool m_mipmapped;
	};

	/**
	 * Wrapper around a texture and sampler pair
	 */
	class SampledTexture
	{
	public:
		SampledTexture();
		SampledTexture(const Texture* texture, TextureSampler* sampler);
		~SampledTexture();

		const Texture* texture;
		TextureSampler* sampler;
	};
}

#endif // TEXTURE_H_
